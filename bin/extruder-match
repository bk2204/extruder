#!/usr/bin/ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'processors')

require 'optparse'
require 'extruder'
require 'extruder/mail'
require 'extruder/script'

def field(msg, metadata, field)
  case field
  when 'digest'
    msg.digest_as_hex
  else
    pieces = field.split('.')
    data = metadata
    pieces.each do |f|
      data = case data
      when Hash
        data[f.to_sym]
      when Array
        data[f.to_i]
      else
        nil
      end
    end
    data
  end
end

options = {
  fields: [],
  expr: 'false',
  sep: ' ',
  split_on: "\n"
}
process = nil

OptionParser.new do |opts|
  opts.banner = 'Usage: extruder-process [-q [-c config-file] | -F [-0]]'

  opts.on('-c', '--config-file CONFIG-FILE') do |file|
    options[:config] = file
  end

  opts.on('-f', '--field FIELD') do |field|
    options[:fields] << field
  end

  opts.on('-e', '--expression EXPR') do |expr|
    options[:expr] = expr
  end

  opts.on('-s', '--separator SEPARATOR') do |sep|
    options[:sep] = sep
  end

  opts.on('-S', '--dummy-sender [SENDER]') do |sender|
    options[:sender] = sender || '???@???'
  end

  opts.on('-m', '--messages') do
    options[:fields] = nil
  end

  opts.on('-q', '--queue') do
    process = 'queue'
  end

  opts.on('-F', '--from-file') do
    process = 'file'
  end
end.parse!

_, items = Extruder::Script.process_items(options, process)
items.each do |msg|
  m = msg.metadata

  # This is specifically designed so the end user can write an arbitrary
  # expression.  Clearly this program should not be run with untrusted input.
  selected = eval options[:expr] # rubocop: disable Lint/Eval

  next unless selected
  if options[:fields].nil?
    om = msg.original_message
    if om.start_with? 'From '
      puts om
    else
      sender = options[:sender] || msg.message.sender || msg.message.from ||
        '???@???'
      sender = sender[0] if sender.is_a? Array

      time = Time.now.utc.strftime('%a %b %e %H:%M:%S %Y')
      puts "From #{sender} #{time}"
      puts om.gsub(/^(>*From )/, '>\1')
    end
  else
    puts options[:fields].map { |f| field(msg, m, f) }.join(options[:sep])
  end
end
