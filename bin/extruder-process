#!/usr/bin/ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'processors')

require 'optparse'
require 'extruder'
require 'extruder/mail'
require 'extruder/script'

def selected_items(items, options)
  tag = options[:cache_tag]
  cached = options[:cached]

  return items if cached.nil?

  # If no tag is provided, select every item; otherwise, select all items
  # where the tag matches if cached is true, and every item where the tag
  # does not match if it is false.
  items.select do |item|
    !tag || (((item.metadata[:cache_tag] || []).include?(tag)) ^ !cached)
  end
end

options = {
  config: [],
  processors: [],
  save: false,
  split_on: "\n"
}
process = nil

OptionParser.new do |opts|
  opts.banner = 'Usage: extruder-process [-q [-c config-file] | -F [-0]]'

  opts.on('-c', '--config-file CONFIG-FILE') do |file|
    options[:config] = file
  end

  opts.on('-p', '--processor PROCESSOR-NAME') do |name|
    options[:processors] << name
  end

  opts.on('-s', '--save-metadata') do
    options[:save] = true
  end

  opts.on('-q', '--queue') do
    process = 'queue'
  end

  opts.on('--cached-only') do
    options[:cached] = true
  end

  opts.on('--uncached-only') do
    options[:cached] = false
  end

  opts.on('-T', '--cache-tag TAG') do |tag|
    options[:cache_tag] = tag
  end

  opts.on('-F', '--from-file') do
    process = 'file'
  end

  opts.on('-0') do
    options[:split_on] = "\0"
  end
end.parse!

config, items = Extruder::Script.process_items(options, process)

runner = Extruder::QueueRunner.new config
runner.run(selected_items(items, options))

items.save_metadata if options[:save]
